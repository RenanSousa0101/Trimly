// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int          @id @default(autoincrement())
  name            String       @db.VarChar(255)
  email           String       @unique @db.VarChar(255)
  password        String       @db.VarChar(255)
  avatar_url      String?      @db.VarChar(255)
  bio             String?      @db.Text
  isEmailVerified Boolean      @default(false)
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  Phone           Phone[]
  Address         Address[]
  User_Roles      User_Roles[]
  Admin           Admin?
  Provider        Provider?
  Client          Client?

  VerificationToken VerificationToken[]
}

model VerificationToken {
  id         Int       @id @default(autoincrement())
  token      String    @unique
  user_id    Int
  type       TokenType
  expiresAt  DateTime
  created_at DateTime  @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([token, type])
  @@index([user_id])
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Phone {
  id           Int       @id @default(autoincrement())
  user_id      Int
  phone_number String    @db.VarChar(16)
  phone_type   PhoneType @default(Mobile)
  is_primary   Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum PhoneType {
  Home
  Mobile
  Work
  Fax
  Other
}

model Address {
  id           Int         @id @default(autoincrement())
  district_id  Int
  user_id      Int
  street       String      @db.VarChar(255)
  number       String      @db.VarChar(255)
  cep_street   String      @db.VarChar(255)
  complement   String?     @db.VarChar(255)
  address_type AddressType @default(Home)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  district     District    @relation(fields: [district_id], references: [id], onDelete: Cascade)
}

enum AddressType {
  Home
  Work
  Other
}

model District {
  id         Int       @id @default(autoincrement())
  city_id    Int
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  address    Address[]
  city       City      @relation(fields: [city_id], references: [id], onDelete: Cascade)

  @@unique([name, city_id])
}

model City {
  id         Int        @id @default(autoincrement())
  state_id   Int
  name       String     @db.VarChar(255)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  district   District[]
  state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)

  @@unique([name, state_id])
}

model State {
  id         Int      @id @default(autoincrement())
  country_id Int
  name       String   @db.VarChar(255)
  uf         String   @db.VarChar(2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  city       City[]
  country    Country  @relation(fields: [country_id], references: [id], onDelete: Cascade)

  @@unique([uf, country_id])
}

model Country {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  acronym    String   @unique @db.VarChar(3)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  state      State[]
}

model Roles {
  id         Int          @id @default(autoincrement())
  role_type  RoleType     @unique @default(Client)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  user_roles User_Roles[]
}

enum RoleType {
  User
  Client
  Provider
  Admin
}

model User_Roles {
  id         Int      @id @default(autoincrement())
  user_id    Int
  roles_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  roles      Roles    @relation(fields: [roles_id], references: [id], onDelete: Cascade)

  @@unique([user_id, roles_id])
}

model Admin {
  id         Int      @id @default(autoincrement())
  user_id    Int      @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Provider {
  id                      Int                       @id @default(autoincrement())
  user_id                 Int                       @unique
  phone_id                Int                       @unique
  address_id              Int                       @unique
  business_name           String                    @db.VarChar(255)
  cnpj                    String?                   @unique @db.VarChar(14)
  cpf                     String?                   @unique @db.VarChar(11)
  description             String?                   @db.Text
  logo_url                String?                   @db.VarChar(255)
  banner_url              String?                   @db.VarChar(255)
  avarage_rating          Float?                    @default(0)
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  Provider_specialization Provider_Specialization[]
  Time                    Time[]
  Provider_Service        Provider_Service[]
  Scheduling              Scheduling[]
  Rating                  Rating[]
  user                    User                      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Specialization {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @db.VarChar(255)
  description             String?                   @db.Text
  created_at              DateTime                  @default(now())
  updated_at              DateTime                  @updatedAt
  provider_specialization Provider_Specialization[]
}

model Provider_Specialization {
  id                Int            @id @default(autoincrement())
  provider_id       Int
  specialization_id Int
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  provider          Provider       @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  specialization    Specialization @relation(fields: [specialization_id], references: [id], onDelete: Cascade)

  @@unique([provider_id, specialization_id])
}

model Time {
  id          Int      @id @default(autoincrement())
  provider_id Int
  day_of_week Int
  start_time  DateTime
  end_time    DateTime
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

model Client {
  id            Int          @id @default(autoincrement())
  user_id       Int          @unique
  date_of_birth DateTime
  is_active     Boolean      @default(true)
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  Scheduling    Scheduling[]
  Rating        Rating[]
  user          User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Service_Category {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Service     Service[]
}

model Service {
  id                  Int                @id @default(autoincrement())
  service_category_id Int
  name                String             @db.VarChar(255)
  description         String?            @db.Text
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  Provider_Service    Provider_Service[]
  Scheduling          Scheduling[]
  Service_Category    Service_Category   @relation(fields: [service_category_id], references: [id], onDelete: Cascade)
}

model Provider_Service {
  id          Int      @id @default(autoincrement())
  provider_id Int
  service_id  Int
  price       Decimal
  duration    Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Provider    Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  Service     Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

model Scheduling {
  id               Int              @id @default(autoincrement())
  client_id        Int
  provider_id      Int
  service_id       Int
  appointment_date DateTime
  notes            String?          @db.Text
  status           SchedulingStatus @default(Pending)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  Rating           Rating[]
  Client           Client           @relation(fields: [client_id], references: [id], onDelete: Cascade)
  Provider         Provider         @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  Service          Service          @relation(fields: [service_id], references: [id], onDelete: Cascade)
}

enum SchedulingStatus {
  Pending
  Confirmed
  Completed
  Cancelled
}

model Rating {
  id            Int        @id @default(autoincrement())
  scheduling_id Int
  client_id     Int
  provider_id   Int
  score         Int
  comment       String?    @db.Text
  created_at    DateTime   @default(now())
  Scheduling    Scheduling @relation(fields: [scheduling_id], references: [id], onDelete: Cascade)
  Client        Client     @relation(fields: [client_id], references: [id], onDelete: Cascade)
  Provider      Provider   @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}
