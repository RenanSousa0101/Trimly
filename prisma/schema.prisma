// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int         @id @default(autoincrement())
  name       String      @db.VarChar(255)
  email      String      @unique @db.VarChar(255)
  password   String      @db.VarChar(255)
  avatar_url String?     @db.VarChar(255)
  bio        String?     @db.Text
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Phone      Phone[]
  Address    Address[]
  User_Roles User_Roles[]
  Admin      Admin[]
  Provider   Provider[]
}

model Phone {
  id           Int       @id @default(autoincrement())
  user_id      Int
  phone_number String    @db.VarChar(255)
  Phone_type   PhoneType @default(Mobile)
  is_primary   Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  user         User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

enum PhoneType {
  Home
  Mobile
  Work
  Fax
  Other
}

model Address {
  id           Int         @id @default(autoincrement())
  district_id  Int
  user_id      Int
  street       String      @db.VarChar(255)
  number       String      @db.VarChar(255)
  cep_street   String      @db.VarChar(255)
  complement   String?     @db.VarChar(255)
  address_type AddressType @default(Home)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  user         User        @relation(fields: [user_id], references: [id], onDelete: Cascade)
  district     District    @relation(fields: [district_id], references: [id], onDelete: Cascade)
}

enum AddressType {
  Home
  Work
  Other
}

model District {
  id         Int       @id @default(autoincrement())
  city_id    Int
  name       String    @db.VarChar(255)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  address    Address[]
  city       City      @relation(fields: [city_id], references: [id], onDelete: Cascade)
}

model City {
  id         Int        @id @default(autoincrement())
  state_id   Int
  name       String     @db.VarChar(255)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  district   District[]
  state      State      @relation(fields: [state_id], references: [id], onDelete: Cascade)
}

model State {
  id         Int      @id @default(autoincrement())
  country_id Int
  name       String   @db.VarChar(255)
  uf         String   @db.VarChar(2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  city       City[]
  country    Country  @relation(fields: [country_id], references: [id], onDelete: Cascade)
}

model Country {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  acronym    String   @db.VarChar(3)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  state      State[]
}

model Roles {
  id         Int         @id @default(autoincrement())
  role_type  RoleType    @default(Client)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  user_roles User_Roles[]
}

enum RoleType {
  Client
  Provider
  Admin
}

model User_Roles {
  id         Int      @id @default(autoincrement())
  user_id    Int
  roles_id   Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  roles      Roles    @relation(fields: [roles_id], references: [id], onDelete: Cascade)
}

model Admin {
  id         Int      @id @default(autoincrement())
  user_id    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Provider {
  id             Int      @id @default(autoincrement())
  user_id        Int
  business_name  String   @db.VarChar(255)
  cnpj           String?  @db.VarChar(18)
  cpf            String?  @db.VarChar(14)
  description    String?  @db.Text
  logo_url       String?  @db.VarChar(255)
  banner_url     String?  @db.VarChar(255)
  avarage_rating Float?   @default(0)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  Provider_specialization   Provider_Specialization[]
  Time         Time[]
  user           User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Specialization {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  Description String? @db.Text
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  provider_specialization   Provider_Specialization[]
}

model Provider_Specialization {
  id                 Int      @id @default(autoincrement())
  provider_id        Int
  specialization_id  Int
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  provider           Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
  specialization     Specialization @relation(fields: [specialization_id], references: [id], onDelete: Cascade)
}

model Time {
  id        Int      @id @default(autoincrement())
  provider_id Int
  day_of_week Int
  start_time DateTime
  end_time   DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  provider   Provider @relation(fields: [provider_id], references: [id], onDelete: Cascade)
}

